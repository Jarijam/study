7/29
<용어정리>

데이터베이스(database) - 데이터베이스는 기업이나 조직에서 필요한 데이터를 저장하는 것(데이터의 집합)

DBMS(Database Management System)
	- 데이터를 관리하는 시스템
	- 데이터의 유지보수 및 보안을 유지
	- DBMS를 이용하여 데이터를 입력, 수정, 삭제, 조회할 수 있다. (SQL 문 -> 우리가 배우려하는거임!)
	- 종류로는 계층적 데이터베이스, 네트워크 데이터베이스, 관계형데이터베이스

DBA(Database Administrator)
	- 데이터를 관리하는자
	- 데이터 설계, 인덱싱등 튜닝작업
	- 데이터 백업등을 처리

DBMS장점
	- 데이터의 일관성을 유지
	- 무결한 데이터를 유지
	- 여러 사용자가 데이터를 공유할 수 있다
	- 데이터의 중복을 최소화 할 수 있다 (관계형 데이터 베이스)

관계형 데이터 베이스
	- 데이터의 저장을 2차원 테이블로 표현
	

SQL(Structured Query Language) 문
	- 데이터를 조회, 입력, 수정, 삭제 저장하는데 사용되는 언어!
	- DML(데이터 조작어) : insult, update, delete
	- DDL(데이터 정의어) : create table, alter table, drop table ... (작업 후 이 명령어가 나오면 이전까지 자동 저장됨)
	- DCL(데이터 제어어) :  grant, revoke
	- TCL(트렌젝션 처리어) : commit, rollback
	- Query : 데이터의 조회
		기본조회
		함수적용조회
		그룹화(집계)
		조인
		서브쿼리


***set linesize 300 - 시작전 한번 무조건 쳐주기(라인밀림방지)



사용자 계정 만들기
	1) 관리자 계정 접속
	  conn 계정명/계정 패스워드
	2) 계정 생성하기
	  create user 계정명 identified by 패스워드
	3) 권한부여
	  grant connect, resource to scott;
	4) 샘플데이터 추가
	5) 테이블확인
	  select * from tab

alter user hr account unlock; ( 락 푸는거)
alter user hr identified by hr; (비번 바꾸기)


Daily Review.

환경구축 과정 - 한글계정명 한글 경로 모두 영어로
	1. 오라클 다운로드
	2. 오라클 설치
	  - 래지스트리에 기록 되기때문에 오라클 제거나 수정을 반드시 setup.exe를 실행해서 처리
	3. 관리자 계정으로 접속
	4. 사용자 계정 생성
	5. 사용자 계정 권한 설정
	  - 반드시 관리자 계정에서 작업
	6. 사용자 계정으로 접속해서 데이터 저장

강사님 블로그 : blog.naver.com/heaves1

---------------------------------------------------------------------------------------------------------------------------------------------
07/30 금요일 일반

*오라클은 좀 어려운 프로그램. 레지스트리 건드니까 지울땐 setup.exe.로 들어가서 remove

*오라클 설정을 뭔가 바꾸면 시작-시스템-관리도구-서비스 - racleserviceXE랑 oraclexernslistener재실행
	(평소엔 XE랑 XElistener가 항상 실행중)
		ex) 오라클 이미 설치했는데 컴퓨터 계정명이 한글이다?
			-> 영문으로 바꾸고 서비스창에서 우클릭후 다시 시작.

*항상 관리자 모드로 실행
* set linesize나 conn은 SQL 커맨드가 아닌 SQL+명령어라 ;안붙여도됨
** SQL커맨드(위에있음)은 무조건 명령 끝에 ;붙이기!

어플리케이션에서 조회가 가장 많이 일어나는 일이고 가장 잘 알아둬야한다.
예측 불가능한 선택(사용자에 의해)이기 때문에

1. select기본
	[구문]
	select 컬럼명, 컬럼명,... (*은 모든컬럼)
	from 테이블명1,테이블명2,...
	
	- sql문은 대소문자를 구분하지 않는다. 
	- sql문은 명령문의 끝에 ;을 추가한다.
	- 컬럼과 컬럼을 구분하기 위해 콤마를 이욯
	- desc 테이블명 : 테이블의 spec을 조회할때 사용
	- 컬럼명에 alias(별칭)를 사용할 수 있다. 별칭을 사용하면 컬럼명 대신 별칭이 컬럼명 처럼 표시된다.
		컬럼명 alias   
		컬럼명 as alias
			ex) select deptno 부서코드, empno as 사번
				from emp;
	- alias에 특수문자나 공백을 포함하고 싶은 경우 " "로 표시.
	- 함수나 산술연산을 컬럼에 적용할 수 있다.
	- 사용할 수 없는 값이 저장되어 있지 않은 것을 null이라 한다. 
		*한마디로 컬럽의 '값'이 없는것. 0과는 다르다!
		*null은 연산을 해도 결과가 표시되지 않는다(연산 결과도 null이다)
	- 연결연산자를 사용하여 컬럼 여러 개를 하나의 컬럼으로 표시할 수 있따. 문자열도 연결이 가능하다!
		연결연산자 -> ||  (shift+\ 2번)
	- distinct를 이용하면 중복을 제거 가능
		*중복 : '값이 동일한' 레코드
		ex) select distinct job from emp;
	- 오라클에서 문자열은 ' '로 표시



2. select 문에 조건을 적용하기
	[구문]
	select 컬럼명, 컬럼명,... (*은 모든컬럼)
	from 테이블명1,테이블명2,...
	where 조건
		이 조건을 만들 땐 
			컬럼명 연산자 비교할 값 순으로 작성

	- 결과가 true나 false를 리턴하도록 식을 구성해야 한다.
	- 숫자데이터를 이용해서 비교 연산자를 사용할 수 있다. (>, >=, <, <=, =, <>)
		*오라클은 대소문자를 구분하지 않지만 비교할 떄 사용되는 값은 대소문자 구분!
	ex) 
	SQL> select *
  	2  from emp
	  3  where deptno <> 20;

	    	 EMPNO ENAME                JOB                       MGR HIREDATE        SAL       COMM     DEPTNO
	---------- -------------------- ------------------ ---------- -------- ---------- ---------- ----------
	      7499 ALLEN                SALESMAN                 7698 81/02/20       1600        300         30
      	7521 WARD                 SALESMAN                 7698 81/02/22       1250        500         30
      	7654 MARTIN               SALESMAN                 7698 81/09/28       1250       1400         30
      	7698 BLAKE                MANAGER                  7839 81/05/01       2850                    30
      	7782 CLARK                MANAGER                  7839 81/06/09       2450                    10
      	7839 KING                 PRESIDENT                     81/11/17       5000                    10
      	7844 TURNER               SALESMAN                 7698 81/09/08       1500          0         30
      	7900 JAMES                CLERK                    7698 81/12/03        950                    30
      	7934 MILLER               CLERK                    7782 82/01/23       1300                    10

	9 rows selected.

	SQL> select *
 	 2  from emp
  	3  where ENAME ='allen';

	no rows selected

	SQL> select *
  	2  from emp
  	3  where ENAME = 'ALLEN';

     	EMPNO ENAME                JOB                       MGR HIREDATE        SAL       COMM     DEPTNO
	---------- -------------------- ------------------ ---------- -------- ---------- ---------- ----------
     	7499 ALLEN                SALESMAN                 7698 81/02/20       1600        300         30
 
		======> 우항은 정확한 값이니까 대소문자 구분. 왼쪽은 컬럼명이니 대소문자 구분 x



	- 오라클에 날짜, 문자열은 ' ' 로 표시하여 비교한다.
	- 날자 년월이 구분은 슬래쉬 또는 하이픈
	- 오라클에서 테스트용으로 1행 1열짜리 테스트용 테이블은 dual
	- 조건이 여러개 인 경우 and와 or 연산자를 이용해서 처리
		and : 모든 조건이 만족하는 경우 true
		or : 모든 조건 중 한 개만 일치하면 true
			where 컬럼명1 연산자조건1 and(or) 컬럼명2 연산자조건2

*SQL 적기전. 어떤걸 표현하고 싶은지 어떤걸 설계해야하는지 먼저 생각.
	조건이 몇개지? 모두만족? 하나만만족? 처럼..

	- 하나의 컬럼에 대한 조건으로 명시된 값이 어떤 범위안에 포함되는 값인 경우 (사잇값인 경우)
		where 컬럼명 between A and B;
	- 동일한 컬럼에 대해서, 일치하는 값에 대해서 or 연산을 적용하는 경우 in 연산자 사용 가능.
		ex) where 컬럼명 in (값1, 값2, 값3...);

	- not 은 부정
	- null인 데이터를 조회 : is null
	- null이 아닌 데이터를 조회 : is not null
	- like 연산자와 와일드카드를 이요해서 비교가 가능하다.
		: 정확하게 일치하지 않아도 비교 가능 -> 해당 문자열이 포함되어 있기만 하면 된다. 
		  % : 모든 문자열
		  _  : 한 글자

		ex) ename like     'A%' A로시작
				'%A'로 끝
				'%A%' 어디든 A한번 포함 (A의 몇번째인지는 중요하지 않고 A가 무조건 있기만 하면 된다.)
				'_ _ A' 3글자중 3번째 글자가 A
				'_ _ A _ _' 5글자중 3번째 글자가 A

	- 오라클에서 직접 입력하는 값을 리터럴이라 한다.
	  문자열, 날짜 : 작은 따옴표로 표시
	  숫자 : 작은따옴표 없이 숫자만 표시
	

3. select문과 정렬!
	[구문]
	select 컬럼명, 컬럼명,... (*은 모든컬럼)
	from 테이블명1,테이블명2,...
	(where 조건)
	order by 정렬할 컬럼명1 정렬기준1, 컬럼명2 정렬기준2, 컬럼명3 정렬기준3,...

	- 데이터를 정렬할 때 사용
	- 정렬기준
		오름차순 : asc (A -> Z, 1->9, ㄱ->ㅎ)
		내림차순 : desc( 위 반대)



**뭘 아는지보다 내 확장 가능성에 초점을 둬라!
	-> 비전공자가 진급이 빠를 수 있는 이유! 다른 전공에 대한 지식과 혜안이 있기때문.
** 주어진것 또는 오픈된걸 적재적소에!

4. 함수
	1) 실행구분
		-단일행 함수
			하나하나의 행에 함수를 모두 다 실행
		-그룹함수
			여러 행을 그룹으로 묶어 함수를 실행 (행 하나하나 실행할 수 없다)
			*where 절에 사용 불가!
				-> where절은 각 행마다 '확인'하는 절이기 때문. 그룹함수는 레코드 하나의 한 컴럼 값으로는 적용할 수 없음!


	2) 카테고리별 구분
		- 문자열 관련 함수
		- 숫자함수
		- 변환함수
		- 날짜함수

	3) 개요
		- where 절에 그룹함수를 사용할 수 없다.
		- select 절에 일반 컬럼과 그룹함수를 같이 사용할 수 없다.

	4) 문자열 함수
		lower(문자열 or 컬럼) - 문자열을 대문자로 변환
		upper(문자열 or 컬럼) - 문자열을 대문자로 변환
		initcap(문자열 or 컬럼) - 문자열의 첫 글자를 대문자로 변환
		length(문자열 or 컬럼) - 문자열의 길이를 리턴
		concat(문자열1, 문자열2) - || 연산자와 동일하게 진행, 문자열과 문자열을 연걸

		substr(문자열, 숫자1, 숫자2)
		  => 전체 문자열에서 원하는 문자열만 추출
			숫자1 : 시작위치 (음수 붙이면 오른쪽부터 시작위치 찾는다)
			숫자2 : 추출할 문자열의 길이. 길이는 왼쪽->오른쪽으로
		instr(문자열1, 문자, 숫자1, 숫자2)
		  => 특정 문자의 위치를 추출
			문자열 1 : 문자를 찾을 문자열이나 컬럼
			문자 : 찾고자 하는 문자
			숫자 1 : 찾기 시작할 위치
			숫자 2 : n번째 만나는 문자
		
		lpad(문자열1, 숫자, 문자)
		  문자열 1을 지정된 숫자의 길이만큼 표시 남는 자리는 문자로 채운다
			(왼쪽에 채울 문자를 표시)
		  문자열1 : 원본문자
		  숫자 : 표시할 문자열의 길이
		  문자 : 채울문자

		rpad(문자열1, 숫자, 문자)
		  문자열 1을 지정된 숫자의 길이만큼 표시 남는 자리는 문자로 채운다
			(오른쪽에 채울 문자를 표시)
		  문자열1 : 원본문자
		  숫자 : 표시할 문자열의 길이
		  문자 : 채울문자

			ex) 검색엔진에서 사용자 편의를 위해 앞뒤 스페이스(공간) 알아서 자동 제거 후 검색가능 하도록!


		ltrim(문자열 or 컬럼, 삭제할문자)
		  지정된 컬럼이나 문자열에서 연속으로 나오는 삭제할 문자를 지운다.
			(왼쪽에서 지운다.)
		rtrim(문자열 or 컬럼, 삭제할문자
		  지정된 컬럼이나 문자열에서 연속으로 나오는 삭제할 문자를 지운다.
			(오른쪽에서 지운다.)



--------------0802 월요일

	5) 숫자함수
		- round(반올림할 숫자나 컬럼, 숫자)
			반올림
			숫자에 양수, 0, 음수
			
		- trunc(버림할 숫자나 컬럼, 숫자)
			버림
			숫자에 양수. 0. 음수

		- ceil(숫자나 컬럼)
			주어진 값보다 큰 가장 최소 정수값을 구하는 함수

		- mod(숫자1, 숫자2)
			숫자1을 숫자2로 나눈 나머지

		- abs(숫자나 컬럼)
			절대값.
		

	6) 날짜 관련 함수
		*오라클에서 날짜는 연산이 가능
		  1970년 1월 1일이 기준일이라서!(ms는 1900년 1월 1일이 기준)
	
		- months_between(날짜1, 날짜2)
			날짜 1(최근)과 날짜2(이후) 사이의 경과한 개월의 수

			[실습]
			emp 테이블에서 10번 부서에 근무하는 사원들의 현재까지 근무한 개월 수 조회
			소수이하 버리기

			select ename, hiredate, sysdate, months_between(sysdate, hiredate),
			trunc(months_between(sysdate, hiredate), 0) 개월수
			from emp
			where deptno = 10;


		- add_month(날짜1, 숫자)
			날짜에 숫자 개월 수를 더함
			[실습]
			 20번 부서의 사원들의 입사일로 부터 5개월 후의 날짜 출력

		-next_day(날짜, 요일번호)
			정의된 날짜 이후의 날짜데이터에서 지정한 요일에 해당되는 날짜
			일요일 - 1 ~ 토요일 7

		- last_day(날짜)
			날짜 데이터의 마지막날


	7) 변환 함수
		데이터 타입을 변환할때 사용하는 함수

		number -> char -> date

		- to_char
			[num -> char]
			숫자 format을 나타낼 떄 사용 (특수문자를 사용해서 표시)
			9, 0 : 숫자
			,    : comma
			.    : 소숫점
			$, L : 통화기호

			ex)
			select sal, to_char(sal, '9,999'), to_char(sal, 'L9,999')
			from emp;

			[date -> char]
			날짜 데이터를 문자열로 변환할 때 사용 (특수문자를 사용해서 표시)
			YYYY, YY : 년도 데이터
			MM  :  월
			DD  :  일
			DY  :  요일
			HH  :  시간
			MI  :  분
			SS  :  초

				*날짜 변환시, 보여지는 모습은 숫자이지만 변환된 데이터의 형태는 char이다!


		- to_num
			[char -> num]

		
		- to_date
			[char -> date]


	8) null 관련 함수

		-nvl(null이 있는 컬럼, 변경할값)
			null  값을 특정 값으로 변환
			null인 경우 치환할 값은 반드시 컬럼이 데이터 타입과 일치해야 한다.
			만약 다른 값을 넣고 싶으면 컬럼의 타입을 변경해야 한다.

		-nvl2(컬럼, 값1, 값2)
			null을 평가해서 null이면 값2를 null이 아니면 값1을 리턴


5. 그룹 (데이터 집계)
	- 여러 레코드의 데이터를 묶어서 처리하는 방식
	- 통계작업을 위해서 사용
	- 그룹함수를 이용해서 처리
		그룹함수 : 여러 레코드를 '묶어서' 처리. 즉, 그룹당 하나의 결과를 리턴하는 함수다.

	[구문]
	 select 그룹함수, 컬럼(*컬럼을 쓸 수 도 있지만 무조건 group by에 명시된 컬럼만 가능!)
	 from 테이블명1, 테이블명2,...
	 where 조건
	 group by 컬럼명(그룹화 하고 싶은 기준)
	 having 그룹화된 데이터에 명시할 조건
	 order by 컬럼
	
	[개요]
	 - select 문에는 일반 데이터조회 처럼 아무 컬럼이나 정의할 수 없다!
	    반드시 group by에 명시한 컬럼만 정의할 수 있다.
	 - where절을 group by보다 먼저 실행하여 레코드를 먼저 걸러주는 작업
	 - group by전에 조건을 적용해야 한다면 where절에 명시
	 - group by한 후에 만들어지는 결과에 조건을 적용해야 하면 where절에 명시하지 않고 having절에 추가해야 한다.
		* group by 엔 alias적용 X!
	ex)
	SQL> select deptno, count(empno)
	  2  from emp
	  3  group by deptno;

	    DEPTNO   COUNT(EMPNO)
	    ----------  ------------
	        30             6
	        20             5
	        10             3


	[실습] 직업별 인원수와 평균 sal 출력
		select job, count(empno), avg(sal)
		from emp
		group by job;

	[실습]
	 입사월별로 인원수를 출력. 단, sal이 5000이상인 사원은 제외, 그리고 월별 집계가 1인 자료는 출력 x
		select to_char(hiredate, 'MM') 입사월, count(empno)
		from emp
		where sal < 5000
		group by to_char(hiredate, 'MM')
		having count(empno) >1
		order by to_char(hiredate, 'MM');

		

	[실습] 
	 부서별로 최대급여, 최소급여를 출력. 단, job이 president인 데이터는 제외, 최대급여가 3000이상인 부서만 출력
	부서별로 오름차순 정렬

		 select deptno 부서, max(sal) 최대급여, min(sal) 최소급여
 		from emp
 		where job <> 'PRESIDENT'
 		group by deptno
 		having max(sal) >= 3000
 		order by deptno; (or  order by 부서;  - 왜냐면 위에서 alis 정의 해줬기 때문)

	[select문의 정의]
		select -> from -> where -> group by -> having -> order by

	[select문의 실행 순서]
		from -> where -> group by -> having -> select -> order by



-----------------------------------------0803 화요일

쇼핑몰에서 표현할 수 있는 데이터의 그룹은?
	- 상품
		이름, 가격, 사진, 제조사, 재고, 상세내용, 원자재(성분)....
	- 고객
		성명, 아이디, 성별, 주소, 전화번호, 비밀번호, 이메일 ...
	- 장바구니
		수량 
	- 주문내역
	- 게시판
	- 상품리뷰

<테이블 정규화>

*테이블 정규화 하려면 구분할 수 있는, 중복되지 않는 키가 필요하다!! = 기본키 (PK, primary key) < 부모테이블
	ex_ 일반주문테이블의 주문번호

외래키(FK, foreign key) < 자식테이블 


여러 테이블의 값을 가져다가 데이터를 작업하는것 == 조인! 조인! 조인!
	약간 엑셀의 찾기참조 같은 역할

테이블과 테이블의 연관성을 반드시 컬럼으로 나타내줘야 한다!


1. 관계형 데이터 베이스
	- 2차원 테이블로 데이터를 저장
	- 관계형 데이터 베이스에서 테이블은 성격별로 각각 정의해서 관리
	- 데이터의 무결성을 보장
	- 데이터 처리를 위해서 SQL문을 사용
	- 테이블 설계시 정의할 수 있는 컬럼
		*기본키(primary key, PK) : 테이블에서 레코드를 구분하기 위해 사용하는 키
					중복과 공백 허용 x

		* 외래키(foreign key) : 기본 키를 참조하는 키
					테이블의 관계를 나타내기 위해서 사용
					기본키에 정의되지 않은 값을 사용할 수 없다.
		-> 참조무결성이 강화된 db

	- 테이블을 분리해서 설계 [테이블 정규화]
				(하나의 테이블로 표현하기에 중복이 많이 발생하는 경우
				  두 개 이상의 테이블로 정의하여 관리함)

2. 조인
	[구문]
	select 테이블명.컬럼명1, 테이블명.컬럼명2 ...
	from 테이블명1, 테이블명2...

	- 여러 테이블의 데이터를 조회하는 것
	- 일반적인 경우 PK나 FK를 이용해서 조인
	- 관계형 데이터 베이스에서 가장 기본적이고 중요한 개념

	1)조인방법

	- from 절에 조회하고 싶은 테이블을 모두 정의
	- 컬럼명을 정의할 때 컬럼명의 모호성을 피하기 위해서 테이블명을 표시한다
	- 보통은 테이블명을 alias로 정의한 후 사용 (period 뒤에 여백 불가능 조심!)
		ex) select e.empno, e.ename, e.deptno, d.dname
 		     from emp e, dept d
		      where e.deptno = d.deptno;
	- 조인을 하는 경우 반드시 어떤 컬럼기리 관계가 있는지 명시해야 한다.
	  즉, 어떤 컬럼의 값을 기준으로 원하느 값을 찾아와야 하는지 알아야 적절한 데이터를 가져올 수 있다.
	- 비교해야 하는 컬럼을 명시하느 것을 조인조건이라 한다.
	- 조인조건은 where절에 정의한다.
	- 일반적으로 조인조건은 pk테이블의 pk와 fk블의 fk키가 = 연산자로 처리
	- 조인조건은 테이블이 N개면 N-1개의 조건이 필요하다.
	- 조인조건을 정의하지 않거나 잘못 정의하는 경우 어떻게 비교해야 할지 애매하므로 
	  from절에 명시된 모든 테이블의 레코드를 조회해서 출력한다.
	  이를 '카티션 프로덕트(CARTESIAN PRODUCT)'라 한다.
	- 조건이 1개인 경우 조인 조건과 무조건 and조건으로 연결

		[실습] sal가 2000이상인 사원의 사원번호와 부서명을 출력

		select e.empno, d.dname
		from emp e, dept d
		where e.sal >= 2000 and e.deptno = d.deptno;

	- select절에 두 개 이상의 테이블의 컬럼을 표시하지 않는다고 하더라도
	  조건에 사용되면 조인조건을 명시해야 한다.
	  이때, 직접적으로 사용되지 않는 테이블도 조건을 위해 필요하다면 명시해줘야 한다.

		[실습]
		DALLAS에 근무하는 사원의 사원번호, 사원명, sal를 출력

		select e.empno, e.ename, e.sal
		from emp e, dept d, locations l
		where l.city = 'DALLAS'                 %%요거 조심!
          		 	and e.deptno = d.deptno
           		 	and d.loc_code = l.loc_code;

		[실습] 부서별 인원수를 출력. 단, 부서명과 인원수를 출력

		select d.dname, count(e.empno)
		from emp e, dept d
		where e.deptno = d.deptno
		group by d.dname;

		[실습] 도시별로 근무하는 직원의 인원수를 출력. 
		select l.city, count(e.empno)
from emp e, dept d, locations l
where e.deptno = d.deptno
   and d.loc_code = l.loc_code
group by l.city;


	- where 컬럼명 like '%xxxx'
	  where 컬럼명 not like '%xxxx'
		        ---------
			<>안댐!
		

**그룹바이 컬럼명 2개 적을때 앞이 먼저 분류 그다음이 다음 분류!
	select는 그저 출력일뿐. 다만 출력과 기준을 보기 편하게 하기 위해서 순서 같이 맞춰주기!


3. 서브쿼리
















